/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,20],$V3=[1,21],$V4=[1,22],$V5=[1,24],$V6=[1,18],$V7=[1,23],$V8=[1,25],$V9=[1,16],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[5,18,19,22,23,29,30,31,33,35,37,44,46,47,50,51,52,53,54],$Vg=[1,40],$Vh=[1,39],$Vi=[1,41],$Vj=[1,42],$Vk=[1,47],$Vl=[26,33],$Vm=[1,55],$Vn=[1,64],$Vo=[1,53],$Vp=[1,54],$Vq=[1,58],$Vr=[1,59],$Vs=[1,60],$Vt=[1,61],$Vu=[1,62],$Vv=[1,63],$Vw=[17,39],$Vx=[1,67],$Vy=[17,26,39,45,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$Vz=[5,18,19,22,23,24,29,30,31,33,35,37,44,46,47,50,51,52,53,54,58,72,73,74,75,76,77,78],$VA=[1,82],$VB=[26,39],$VC=[1,84],$VD=[1,83],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[1,94],$VO=[1,95],$VP=[1,96],$VQ=[2,86],$VR=[5,18,19,22,23,28,29,30,31,33,35,37,44,46,47,50,51,52,53,54],$VS=[1,116],$VT=[1,117],$VU=[1,118],$VV=[1,119],$VW=[1,120],$VX=[17,26,39,45,58,59,64,65,66,67,68,69,70,71],$VY=[17,26,39,45,58,59,60,61,63,64,65,66,67,68,69,70,71],$VZ=[17,26,39,45,64,65,70,71],$V_=[17,26,39,45,64,65,66,67,68,69,70,71],$V$=[1,155],$V01=[1,156],$V11=[22,44,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"inicio":6,"writeline":7,"declaracion":8,"asignacion":9,"if":10,"while":11,"dowhile":12,"switch":13,"for":14,"metodo":15,"llamadametodo":16,"PUNTO_Y_COMA":17,"BREAK":18,"CONTINUE":19,"statement":20,"LLAV_ABRE":21,"LLAV_CIERRA":22,"IF":23,"PAR_ABRE":24,"expresion":25,"PAR_CIERRA":26,"else":27,"ELSE":28,"WHILE":29,"DO":30,"FOR":31,"actualizacion":32,"IDENTIFICADOR":33,"IGUAL":34,"SWITCH":35,"ListaCase":36,"VOID":37,"parametros":38,"COMA":39,"declaracionmetodo":40,"tiposDatosparametros":41,"ListaExpr":42,"case":43,"CASE":44,"DOS_PUNTOS":45,"DEFAULT":46,"WRITELINE":47,"ListaVariables":48,"tiposDatos":49,"STRING":50,"INT":51,"DOUBLE":52,"BOOLEAN":53,"CHAR":54,"incrementos":55,"MASMAS":56,"MENOSMENOS":57,"MENOS":58,"MAS":59,"POR":60,"DIVIDIR":61,"ELEVAR":62,"MODULO":63,"D_IGUAL":64,"DIFERENTE":65,"MAYOR_IGUAL":66,"MENOR_IGUAL":67,"MAYOR":68,"MENOR":69,"AND":70,"OR":71,"NOT":72,"ENTERO":73,"DECIMAL":74,"CADENA_COMILLAS":75,"CADENA_COMILLAS_SIMPLES":76,"TRUE":77,"FALSE":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"PUNTO_Y_COMA",18:"BREAK",19:"CONTINUE",21:"LLAV_ABRE",22:"LLAV_CIERRA",23:"IF",24:"PAR_ABRE",26:"PAR_CIERRA",28:"ELSE",29:"WHILE",30:"DO",31:"FOR",33:"IDENTIFICADOR",34:"IGUAL",35:"SWITCH",37:"VOID",39:"COMA",44:"CASE",45:"DOS_PUNTOS",46:"DEFAULT",47:"WRITELINE",50:"STRING",51:"INT",52:"DOUBLE",53:"BOOLEAN",54:"CHAR",56:"MASMAS",57:"MENOSMENOS",58:"MENOS",59:"MAS",60:"POR",61:"DIVIDIR",62:"ELEVAR",63:"MODULO",64:"D_IGUAL",65:"DIFERENTE",66:"MAYOR_IGUAL",67:"MENOR_IGUAL",68:"MAYOR",69:"MENOR",70:"AND",71:"OR",72:"NOT",73:"ENTERO",74:"DECIMAL",75:"CADENA_COMILLAS",76:"CADENA_COMILLAS_SIMPLES",77:"TRUE",78:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[20,2],[20,3],[10,6],[27,2],[27,2],[27,0],[11,5],[12,7],[14,8],[32,1],[32,3],[13,7],[15,5],[15,6],[38,3],[38,1],[40,2],[16,3],[16,4],[36,2],[36,1],[43,4],[43,3],[7,5],[48,3],[48,1],[49,1],[49,1],[49,1],[49,1],[49,1],[41,1],[41,1],[41,1],[41,1],[41,1],[9,4],[9,5],[9,2],[8,3],[55,2],[55,2],[42,3],[42,1],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,3],[25,1],[25,4],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 14:
this.$=new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 15:
this.$=new Continue(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 16:
this.$=new Statement([],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 17:
this.$=new Statement($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 18:
this.$= new If($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 19: case 20: case 25: case 79:
this.$=$$[$0]
break;
case 21:
this.$=null
break;
case 22:
this.$=new While($$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 23:
this.$=new DoWhile($$[$0-2],$$[$0-5],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 24:
this.$=new For($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line, _$[$0-7].first_column)
break;
case 26:
this.$= new AsignacionSinDeclaracion($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 27:
this.$=new Switch($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 28:
this.$=new Metodo($$[$0-3],$$[$0],[],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 29:
this.$=new Metodo($$[$0-4],$$[$0],$$[$0-2],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 30:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 31:
this.$=[$$[$0]]
break;
case 32:
this.$=[$$[$0-1],$$[$0]]
break;
case 33:
this.$=new LlamadaMetodo($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 34:
this.$=new LlamadaMetodo($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 35:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 36:
this.$=[$$[$0]];
break;
case 37:
this.$=[$$[$0-2],$$[$0]]
break;
case 38:
this.$=[new Literal("DEFAULT",TipoLiteral.STRING, _$[$0-2].first_line, _$[$0-2].first_column),$$[$0]]
break;
case 39:
this.$ = new WriteLine($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 40:
 $$[$0-2].push($$[$0]);
                                          this.$ = $$[$0-2];
break;
case 41: case 59:
this.$ = [$$[$0]];
break;
case 47:
this.$=4
break;
case 48:
this.$=0
break;
case 49:
this.$=1
break;
case 50:
this.$=2
break;
case 51:
this.$=3
break;
case 52:
this.$= new AsignacionSinDeclaracion($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 53:
this.$ = new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 54:
this.$=$$[$0-1]
break;
case 55:
this.$= new Asignacion($$[$0-2],$$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 56: case 57:
this.$=new IncrementoDecremento($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 58:
 $$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 60:
this.$= new Aritmetica($$[$0],new Literal("-1",TipoLiteral.DOUBLE, _$[$0-1].first_line, _$[$0-1].first_column),TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 61:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 62:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 63:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 64:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 65:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 66:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 67:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 68:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 69:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 70:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 71:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 72:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 73:
this.$= new Logica($$[$0-2],$$[$0],TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 74:
this.$= new Logica($$[$0-2],$$[$0],TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 75:
this.$= new Logica(null,$$[$0],TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 76:
this.$= $$[$0-1]
break;
case 78:
this.$ = new Casteos($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 80:
this.$= new Literal($$[$0],TipoLiteral.INT, _$[$0].first_line, _$[$0].first_column)
break;
case 81:
this.$= new Literal($$[$0],TipoLiteral.DOUBLE, _$[$0].first_line, _$[$0].first_column)
break;
case 82:

                                        var cadena = $$[$0].substr(0,$$[$0].length);
                                         cadena=cadena.replace(/\\n/g,"\n");
                                         cadena=cadena.replace(/\\t/g,"\t");
                                         cadena=cadena.replace(/\\'/g,"\'");
                                         cadena=cadena.replace(/\\\\/g,"\\");
                                         cadena=cadena.replace(/\"/g,"\\\"");//no agarra no se por que:( pero si le cambio de simbolo si agarra
                                        this.$= new Literal(cadena,TipoLiteral.STRING, _$[$0].first_line, _$[$0].first_column);
                                        
break;
case 83:
this.$= new Literal($$[$0],TipoLiteral.CHAR, _$[$0].first_line, _$[$0].first_column)
break;
case 84: case 85:
this.$= new Literal($$[$0],TipoLiteral.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
case 86:
this.$= new AccesoAmbito($$[$0], _$[$0].first_line, _$[$0].first_column)
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V0,19:$V1,23:$V2,29:$V3,30:$V4,31:$V5,33:$V6,35:$V7,37:$V8,47:$V9,49:17,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:19},{1:[3]},{5:[1,31],6:32,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V0,19:$V1,23:$V2,29:$V3,30:$V4,31:$V5,33:$V6,35:$V7,37:$V8,47:$V9,49:17,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:19},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),{17:[1,33]},{17:[1,34]},{17:[1,35]},{24:[1,36]},{33:[1,38],48:37},{24:$Vg,34:$Vh,56:$Vi,57:$Vj},{17:[1,43]},{24:[1,44]},{24:[1,45]},{20:46,21:$Vk},{24:[1,48]},{24:[1,49]},{33:[1,50]},o($Vl,[2,42]),o($Vl,[2,43]),o($Vl,[2,44]),o($Vl,[2,45]),o($Vl,[2,46]),{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),{16:56,24:$Vm,25:52,33:$Vn,42:51,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{17:[1,65],39:[1,66]},o($Vw,[2,41],{34:$Vx}),{16:56,24:$Vm,25:68,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:52,26:[1,69],33:$Vn,42:70,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},o($Vy,[2,56]),o($Vy,[2,57]),o($Vz,[2,54]),{16:56,24:$Vm,25:71,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:72,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{29:[1,73]},{4:75,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V0,19:$V1,22:[1,74],23:$V2,29:$V3,30:$V4,31:$V5,33:$V6,35:$V7,37:$V8,47:$V9,49:17,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:19},{16:56,24:$Vm,25:76,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{9:77,33:[1,78],49:79,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:19},{24:[1,80]},{26:[1,81],39:$VA},o($VB,[2,59],{58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP}),{16:56,24:$Vm,25:97,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:98,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:99,33:$Vn,49:100,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},o($Vy,[2,77]),o($Vy,[2,79]),o($Vy,[2,80]),o($Vy,[2,81]),o($Vy,[2,82]),o($Vy,[2,83]),o($Vy,[2,84]),o($Vy,[2,85]),o($Vy,$VQ,{24:$Vg,56:$Vi,57:$Vj}),o($Vf,[2,55]),{33:[1,101]},{16:56,24:$Vm,25:102,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{17:[1,103],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP},o($Vy,[2,33]),{26:[1,104],39:$VA},{26:[1,105],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP},{26:[1,106],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP},{24:[1,107]},o($VR,[2,16]),{6:32,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V0,19:$V1,22:[1,108],23:$V2,29:$V3,30:$V4,31:$V5,33:$V6,35:$V7,37:$V8,47:$V9,49:17,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:19},{26:[1,109],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP},{16:56,24:$Vm,25:110,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{34:$Vh,56:$Vi,57:$Vj},{33:[1,111]},{26:[1,112],38:113,40:114,41:115,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW},{17:[1,121]},{16:56,24:$Vm,25:122,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:123,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:124,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:125,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:126,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:127,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:128,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:129,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:130,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:131,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:132,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:133,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:134,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:135,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{16:56,24:$Vm,25:136,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},o($Vy,[2,60]),o($Vy,[2,75]),{26:[1,137],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP},{26:[1,138]},o($Vw,[2,40]),{17:[1,139],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP},o($Vz,[2,52]),o($Vy,[2,34]),{20:140,21:$Vk},{20:141,21:$Vk},{16:56,24:$Vm,25:142,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},o($VR,[2,17]),{21:[1,143]},{17:[1,144],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP},{34:$Vx},{20:145,21:$Vk},{26:[1,146],39:[1,147]},o($VB,[2,31]),{33:[1,148]},{33:[2,47]},{33:[2,48]},{33:[2,49]},{33:[2,50]},{33:[2,51]},o($Vf,[2,39]),o($VB,[2,58],{58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP}),o($VX,[2,61],{60:$VE,61:$VF,62:$VG,63:$VH}),o($VX,[2,62],{60:$VE,61:$VF,62:$VG,63:$VH}),o($VY,[2,63],{62:$VG}),o($VY,[2,64],{62:$VG}),o($Vy,[2,65]),o($VY,[2,66],{62:$VG}),o($VZ,[2,67],{58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,66:$VK,67:$VL,68:$VM,69:$VN}),o($VZ,[2,68],{58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,66:$VK,67:$VL,68:$VM,69:$VN}),o($V_,[2,69],{58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($V_,[2,70],{58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($V_,[2,71],{58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($V_,[2,72],{58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o([17,26,39,45,70,71],[2,73],{58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN}),o([17,26,39,45,71],[2,74],{58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO}),o($Vy,[2,76]),{16:56,24:$Vm,25:149,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},o($Vz,[2,53]),o($Vf,[2,21],{27:150,28:[1,151]}),o($Vf,[2,22]),{26:[1,152],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP},{36:153,43:154,44:$V$,46:$V01},{16:56,24:$Vm,25:158,32:157,33:[1,159],55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},o($Vf,[2,28]),{20:160,21:$Vk},{40:161,41:115,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW},o($VB,[2,32]),o($Vy,[2,78]),o($Vf,[2,18]),{10:163,20:162,21:$Vk,23:$V2},{17:[1,164]},{22:[1,165],43:166,44:$V$,46:$V01},o($V11,[2,36]),{16:56,24:$Vm,25:167,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{45:[1,168]},{26:[1,169]},{26:[2,25],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP},o([26,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$VQ,{24:$Vg,34:[1,170],56:$Vi,57:$Vj}),o($Vf,[2,29]),o($VB,[2,30]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,23]),o($Vf,[2,27]),o($V11,[2,35]),{45:[1,171],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP},{4:172,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V0,19:$V1,23:$V2,29:$V3,30:$V4,31:$V5,33:$V6,35:$V7,37:$V8,47:$V9,49:17,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:19},{20:173,21:$Vk},{16:56,24:$Vm,25:174,33:$Vn,55:57,58:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv},{4:175,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V0,19:$V1,23:$V2,29:$V3,30:$V4,31:$V5,33:$V6,35:$V7,37:$V8,47:$V9,49:17,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:19},o($V11,[2,38],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,49:17,55:19,6:32,18:$V0,19:$V1,23:$V2,29:$V3,30:$V4,31:$V5,33:$V6,35:$V7,37:$V8,47:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve}),o($Vf,[2,24]),{26:[2,26],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP},o($V11,[2,37],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,49:17,55:19,6:32,18:$V0,19:$V1,23:$V2,29:$V3,30:$V4,31:$V5,33:$V6,35:$V7,37:$V8,47:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve})],
defaultActions: {31:[2,1],116:[2,47],117:[2,48],118:[2,49],119:[2,50],120:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Aritmetica,TipoAritmetica} = require('../Expresion/Aritmetica')
    const {Relacional,TipoRelacional} = require('../Expresion/Relacional')
    const {Literal,TipoLiteral} = require('../Expresion/Literal')
    const {Logica,TipoLogica} = require('../Expresion/Logica')
    const error_1 = require('../Error/Error')
    const listaErrores = require('../Error/ListaErrores')
    const {AccesoAmbito} = require('../Expresion/AccesoAmbito')
    const {Declaracion} = require('../Instruccion/Declaracion')
    const {WriteLine} = require('../Instruccion/WriteLine')
    const {Asignacion} = require('../Instruccion/Asignacion')
    const {AsignacionSinDeclaracion} = require('../Instruccion/AsignacionSinDeclaracion')
    const {Casteos} = require('../Instruccion/Casteos')
    const {IncrementoDecremento}=require('../Instruccion/IncrementoDecremento')
    const {If}=require('../Instruccion/If')
    const {Statement}=require('../Instruccion/Statement')
    const {Continue}=require('../Instruccion/Continue')
    const {Break}=require('../Instruccion/Break')
    const {While}=require('../Instruccion/While')
    const {Switch}=require('../Instruccion/Switch')
    const {DoWhile}=require('../Instruccion/DoWhile')
    const {For}=require('../Instruccion/For')
    const {Error}=require('../Error/Error')
    const {Metodo}=require('../Instruccion/Metodo')
    const {LlamadaMetodo}=require('../Instruccion/LlamadaMetodo')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 77;
break;
case 4:return 78;
break;
case 5:return 47;
break;
case 6:return 50;
break;
case 7:return 51;
break;
case 8:return 52;
break;
case 9:return 53;
break;
case 10:return 54;
break;
case 11:return 23;
break;
case 12:return 28;
break;
case 13:return 29;
break;
case 14:return 30;
break;
case 15:return 18;
break;
case 16:return 19;
break;
case 17:return 35;
break;
case 18:return 46;
break;
case 19:return 44;
break;
case 20:return 31;
break;
case 21:return 37;
break;
case 22:return 74;
break;
case 23:return 73;
break;
case 24:return 33;
break;
case 25:return 75;
break;
case 26:return 76;
break;
case 27:return 24;                   
break;
case 28:return 26;
break;
case 29:return   'LLAV_ABRE';
break;
case 30:return   'LLAV_CIERRA';
break;
case 31:return 64;
break;
case 32:return 67;
break;
case 33:return 69;
break;
case 34:return 66;                     
break;
case 35:return 68;
break;
case 36:return 65;
break;
case 37:return 71;
break;
case 38:return 70;
break;
case 39:return 72;
break;
case 40:return 56
break;
case 41:return 57
break;
case 42:return 39
break;
case 43:return 59;
break;
case 44:return 58;
break;
case 45:return 60;
break;
case 46:return 61;
break;
case 47:return 62;
break;
case 48:return 63;
break;
case 49:return 34;
break;
case 50:return 17;
break;
case 51:return 45;
break;
case 52: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75;
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 76;
break;
case 54:return 5;
break;
case 55:
                        /*const er = new error_1.Error(yy_.yylloc.first_line,yy_.yylloc.first_column,"Léxico",yy_.yytext);
                        listaErrores.ListaErrores.getInstance().push(er);*/
                        console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);
                        new Error(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico','Error detectado');                     
                        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:writeline\b)/i,/^(?:string\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/i,/^(?:[A-Za-z]+['_'0-9A-Za-z]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}