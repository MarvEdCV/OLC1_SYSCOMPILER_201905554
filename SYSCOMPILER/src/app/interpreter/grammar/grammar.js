/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,13],$V7=[1,15],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[5,14,16,19,20,26,27,28,31,33,34,38,40,41,42,43,44],$Ve=[1,34],$Vf=[1,35],$Vg=[1,40],$Vh=[23,38],$Vi=[1,46],$Vj=[1,54],$Vk=[1,44],$Vl=[1,45],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[15,37],$Vt=[15,23,32,37,49,50,51,52,53,54,55,56,57,58,59,60,61,62],$Vu=[23,37],$Vv=[1,68],$Vw=[1,67],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,73],$VC=[1,74],$VD=[1,75],$VE=[1,76],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[1,80],$VJ=[5,14,16,19,20,25,26,27,28,31,33,34,38,40,41,42,43,44],$VK=[15,23,32,37,49,50,55,56,57,58,59,60,61,62],$VL=[15,23,32,37,49,50,51,52,54,55,56,57,58,59,60,61,62],$VM=[15,23,32,37,55,56,61,62],$VN=[15,23,32,37,55,56,57,58,59,60,61,62],$VO=[1,122],$VP=[1,123],$VQ=[19,31,33];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"inicio":6,"writeline":7,"declaracion":8,"asignacion":9,"if":10,"while":11,"dowhile":12,"switch":13,"BREAK":14,"PUNTO_Y_COMA":15,"CONTINUE":16,"statement":17,"LLAV_ABRE":18,"LLAV_CIERRA":19,"IF":20,"PAR_ABRE":21,"expresion":22,"PAR_CIERRA":23,"else":24,"ELSE":25,"WHILE":26,"DO":27,"SWITCH":28,"ListaCase":29,"case":30,"CASE":31,"DOS_PUNTOS":32,"DEFAULT":33,"WRITELINE":34,"ListaExpr":35,"ListaVariables":36,"COMA":37,"IDENTIFICADOR":38,"tiposDatos":39,"STRING":40,"INT":41,"DOUBLE":42,"BOOLEAN":43,"CHAR":44,"IGUAL":45,"incrementos":46,"MASMAS":47,"MENOSMENOS":48,"MENOS":49,"MAS":50,"POR":51,"DIVIDIR":52,"ELEVAR":53,"MODULO":54,"D_IGUAL":55,"DIFERENTE":56,"MAYOR_IGUAL":57,"MENOR_IGUAL":58,"MAYOR":59,"MENOR":60,"AND":61,"OR":62,"NOT":63,"ENTERO":64,"DECIMAL":65,"CADENA_COMILLAS":66,"CADENA_COMILLAS_SIMPLES":67,"TRUE":68,"FALSE":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"BREAK",15:"PUNTO_Y_COMA",16:"CONTINUE",18:"LLAV_ABRE",19:"LLAV_CIERRA",20:"IF",21:"PAR_ABRE",23:"PAR_CIERRA",25:"ELSE",26:"WHILE",27:"DO",28:"SWITCH",31:"CASE",32:"DOS_PUNTOS",33:"DEFAULT",34:"WRITELINE",37:"COMA",38:"IDENTIFICADOR",40:"STRING",41:"INT",42:"DOUBLE",43:"BOOLEAN",44:"CHAR",45:"IGUAL",47:"MASMAS",48:"MENOSMENOS",49:"MENOS",50:"MAS",51:"POR",52:"DIVIDIR",53:"ELEVAR",54:"MODULO",55:"D_IGUAL",56:"DIFERENTE",57:"MAYOR_IGUAL",58:"MENOR_IGUAL",59:"MAYOR",60:"MENOR",61:"AND",62:"OR",63:"NOT",64:"ENTERO",65:"DECIMAL",66:"CADENA_COMILLAS",67:"CADENA_COMILLAS_SIMPLES",68:"TRUE",69:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[17,2],[17,3],[10,6],[24,2],[24,2],[24,0],[11,5],[12,7],[13,7],[29,2],[29,1],[30,4],[30,3],[7,5],[36,3],[36,1],[39,1],[39,1],[39,1],[39,1],[39,1],[9,4],[9,5],[9,2],[8,3],[46,2],[46,2],[35,3],[35,1],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,4],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 11:
this.$=new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 12:
this.$=new Continue(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 13:
this.$=new Statement([],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 14:
this.$=new Statement($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 15:
this.$= new If($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 16: case 17: case 60:
this.$=$$[$0]
break;
case 18:
this.$=null
break;
case 19:
this.$=new While($$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 20:
this.$=new DoWhile($$[$0-2],$$[$0-5],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 21:
this.$=new Switch($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 22:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 23:
this.$=[$$[$0]];
break;
case 24:
this.$=[$$[$0-2],$$[$0]]
break;
case 25:
this.$=[new Literal("DEFAULT",TipoLiteral.STRING, _$[$0-2].first_line, _$[$0-2].first_column),$$[$0]]
break;
case 26:
this.$ = new WriteLine($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 27:
 $$[$0-2].push($$[$0]);
                                          this.$ = $$[$0-2];
break;
case 28: case 41:
this.$ = [$$[$0]];
break;
case 34:
this.$= new AsignacionSinDeclaracion($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 35:
this.$ = new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 36:
this.$=$$[$0-1]
break;
case 37:
this.$= new Asignacion($$[$0-2],$$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 38: case 39:
this.$=new IncrementoDecremento($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 40:
 $$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 42:
this.$= new Aritmetica($$[$0],new Literal("-1",TipoLiteral.DOUBLE, _$[$0-1].first_line, _$[$0-1].first_column),TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 43:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 44:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 45:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 46:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 47:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 48:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 49:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 50:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 51:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 52:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 53:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 54:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 55:
this.$= new Logica($$[$0-2],$$[$0],TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 56:
this.$= new Logica($$[$0-2],$$[$0],TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 57:
this.$= new Logica(null,$$[$0],TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 58:
this.$= $$[$0-1]
break;
case 59:
this.$ = new Casteos($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 61:
this.$= new Literal($$[$0],TipoLiteral.INT, _$[$0].first_line, _$[$0].first_column)
break;
case 62:
this.$= new Literal($$[$0],TipoLiteral.DOUBLE, _$[$0].first_line, _$[$0].first_column)
break;
case 63:

                                        var cadena = $$[$0].substr(0,$$[$0].length);
                                         cadena=cadena.replace(/\\n/g,"\n");
                                         cadena=cadena.replace(/\\t/g,"\t");
                                         cadena=cadena.replace(/\\'/g,"\'");
                                         cadena=cadena.replace(/\\\\/g,"\\");
                                         cadena=cadena.replace(/\"/g,"\\\"");//no agarra no se por que:( pero si le cambio de simbolo si agarra
                                        this.$= new Literal(cadena,TipoLiteral.STRING, _$[$0].first_line, _$[$0].first_column);
                                        
break;
case 64:
this.$= new Literal($$[$0],TipoLiteral.CHAR, _$[$0].first_line, _$[$0].first_column)
break;
case 65: case 66:
this.$= new Literal($$[$0],TipoLiteral.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
case 67:
this.$= new AccesoAmbito($$[$0], _$[$0].first_line, _$[$0].first_column)
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,20:$V2,26:$V3,27:$V4,28:$V5,34:$V6,38:$V7,39:14,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,46:16},{1:[3]},{5:[1,26],6:27,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,20:$V2,26:$V3,27:$V4,28:$V5,34:$V6,38:$V7,39:14,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,46:16},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),{15:[1,28]},{15:[1,29]},{21:[1,30]},{36:31,38:[1,32]},{45:[1,33],47:$Ve,48:$Vf},{15:[1,36]},{21:[1,37]},{21:[1,38]},{17:39,18:$Vg},{21:[1,41]},o($Vh,[2,29]),o($Vh,[2,30]),o($Vh,[2,31]),o($Vh,[2,32]),o($Vh,[2,33]),{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,11]),o($Vd,[2,12]),{21:$Vi,22:43,35:42,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{15:[1,55],37:[1,56]},o($Vs,[2,28],{45:[1,57]}),{21:$Vi,22:58,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($Vt,[2,38]),o($Vt,[2,39]),o($Vd,[2,36]),{21:$Vi,22:59,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:60,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{26:[1,61]},{4:63,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,19:[1,62],20:$V2,26:$V3,27:$V4,28:$V5,34:$V6,38:$V7,39:14,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,46:16},{21:$Vi,22:64,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{23:[1,65],37:[1,66]},o($Vu,[2,41],{49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI}),{21:$Vi,22:81,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:82,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:83,38:$Vj,39:84,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($Vt,[2,60]),o($Vt,[2,61]),o($Vt,[2,62]),o($Vt,[2,63]),o($Vt,[2,64]),o($Vt,[2,65]),o($Vt,[2,66]),o($Vt,[2,67],{47:$Ve,48:$Vf}),o($Vd,[2,37]),{38:[1,85]},{21:$Vi,22:86,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{15:[1,87],49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI},{23:[1,88],49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI},{23:[1,89],49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI},{21:[1,90]},o($VJ,[2,13]),{6:27,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,19:[1,91],20:$V2,26:$V3,27:$V4,28:$V5,34:$V6,38:$V7,39:14,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,46:16},{23:[1,92],49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI},{15:[1,93]},{21:$Vi,22:94,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:95,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:96,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:97,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:98,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:99,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:100,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:101,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:102,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:103,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:104,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:105,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:106,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:107,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{21:$Vi,22:108,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($Vt,[2,42]),o($Vt,[2,57]),{23:[1,109],49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI},{23:[1,110]},o($Vs,[2,27]),{15:[1,111],49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI},o($Vd,[2,34]),{17:112,18:$Vg},{17:113,18:$Vg},{21:$Vi,22:114,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($VJ,[2,14]),{18:[1,115]},o($Vd,[2,26]),o($Vu,[2,40],{49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI}),o($VK,[2,43],{51:$Vx,52:$Vy,53:$Vz,54:$VA}),o($VK,[2,44],{51:$Vx,52:$Vy,53:$Vz,54:$VA}),o($VL,[2,45],{53:$Vz}),o($VL,[2,46],{53:$Vz}),o($Vt,[2,47]),o($VL,[2,48],{53:$Vz}),o($VM,[2,49],{49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,57:$VD,58:$VE,59:$VF,60:$VG}),o($VM,[2,50],{49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,57:$VD,58:$VE,59:$VF,60:$VG}),o($VN,[2,51],{49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA}),o($VN,[2,52],{49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA}),o($VN,[2,53],{49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA}),o($VN,[2,54],{49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA}),o([15,23,32,37,61,62],[2,55],{49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG}),o([15,23,32,37,62],[2,56],{49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH}),o($Vt,[2,58]),{21:$Vi,22:116,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($Vd,[2,35]),o($Vd,[2,18],{24:117,25:[1,118]}),o($Vd,[2,19]),{23:[1,119],49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI},{29:120,30:121,31:$VO,33:$VP},o($Vt,[2,59]),o($Vd,[2,15]),{10:125,17:124,18:$Vg,20:$V2},{15:[1,126]},{19:[1,127],30:128,31:$VO,33:$VP},o($VQ,[2,23]),{21:$Vi,22:129,38:$Vj,46:47,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{32:[1,130]},o($Vd,[2,16]),o($Vd,[2,17]),o($Vd,[2,20]),o($Vd,[2,21]),o($VQ,[2,22]),{32:[1,131],49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI},{4:132,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,20:$V2,26:$V3,27:$V4,28:$V5,34:$V6,38:$V7,39:14,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,46:16},{4:133,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,20:$V2,26:$V3,27:$V4,28:$V5,34:$V6,38:$V7,39:14,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,46:16},o($VQ,[2,25],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,39:14,46:16,6:27,14:$V0,16:$V1,20:$V2,26:$V3,27:$V4,28:$V5,34:$V6,38:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc}),o($VQ,[2,24],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,39:14,46:16,6:27,14:$V0,16:$V1,20:$V2,26:$V3,27:$V4,28:$V5,34:$V6,38:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc})],
defaultActions: {26:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Aritmetica,TipoAritmetica} = require('../Expresion/Aritmetica')
    const {Relacional,TipoRelacional} = require('../Expresion/Relacional')
    const {Literal,TipoLiteral} = require('../Expresion/Literal')
    const {Logica,TipoLogica} = require('../Expresion/Logica')
    const error_1 = require('../Error/Error')
    const listaErrores = require('../Error/ListaErrores')
    const {AccesoAmbito} = require('../Expresion/AccesoAmbito')
    const {Declaracion} = require('../Instruccion/Declaracion')
    const {WriteLine} = require('../Instruccion/WriteLine')
    const {Asignacion} = require('../Instruccion/Asignacion')
    const {AsignacionSinDeclaracion} = require('../Instruccion/AsignacionSinDeclaracion')
    const {Casteos} = require('../Instruccion/Casteos')
    const {IncrementoDecremento}=require('../Instruccion/IncrementoDecremento')
    const {If}=require('../Instruccion/If')
    const {Statement}=require('../Instruccion/Statement')
    const {Continue}=require('../Instruccion/Continue')
    const {Break}=require('../Instruccion/Break')
    const {While}=require('../Instruccion/While')
    const {Switch}=require('../Instruccion/Switch')
    const {DoWhile}=require('../Instruccion/DoWhile')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 68;
break;
case 4:return 69;
break;
case 5:return 34;
break;
case 6:return 40;
break;
case 7:return 41;
break;
case 8:return 42;
break;
case 9:return 43;
break;
case 10:return 44;
break;
case 11:return 20;
break;
case 12:return 25;
break;
case 13:return 26;
break;
case 14:return 27;
break;
case 15:return 14;
break;
case 16:return 16;
break;
case 17:return 28;
break;
case 18:return 33;
break;
case 19:return 31;
break;
case 20:return 65;
break;
case 21:return 64;
break;
case 22:return 38;
break;
case 23:return 66;
break;
case 24:return 67;
break;
case 25:return 21;                   
break;
case 26:return 23;
break;
case 27:return   'LLAV_ABRE';
break;
case 28:return   'LLAV_CIERRA';
break;
case 29:return 55;
break;
case 30:return 58;
break;
case 31:return 60;
break;
case 32:return 57;                     
break;
case 33:return 59;
break;
case 34:return 56;
break;
case 35:return 62;
break;
case 36:return 61;
break;
case 37:return 63;
break;
case 38:return 47
break;
case 39:return 48
break;
case 40:return 37
break;
case 41:return 50;
break;
case 42:return 49;
break;
case 43:return 51;
break;
case 44:return 52;
break;
case 45:return 53;
break;
case 46:return 54;
break;
case 47:return 45;
break;
case 48:return 15;
break;
case 49:return 32;
break;
case 50: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 66;
break;
case 51: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 67;
break;
case 52:return 5;
break;
case 53:
                        /*const er = new error_1.Error(yy_.yylloc.first_line,yy_.yylloc.first_column,"Léxico",yy_.yytext);
                        listaErrores.ListaErrores.getInstance().push(er);*/
                        console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)                       
                        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:writeline\b)/i,/^(?:string\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/i,/^(?:[A-Za-z]+['_'0-9A-Za-z]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}