/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,22],$V6=[1,16],$V7=[1,21],$V8=[1,14],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[5,15,17,20,21,27,28,29,31,33,36,38,39,44,45,46,47,48],$Vf=[1,36],$Vg=[1,37],$Vh=[1,42],$Vi=[24,31],$Vj=[1,49],$Vk=[1,57],$Vl=[1,47],$Vm=[1,48],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[16,42],$Vu=[1,60],$Vv=[16,24,37,42,52,53,54,55,56,57,58,59,60,61,62,63,64,65],$Vw=[5,15,17,20,21,22,27,28,29,31,33,36,38,39,44,45,46,47,48,52,66,67,68,69,70,71,72],$Vx=[24,42],$Vy=[1,73],$Vz=[1,72],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[1,79],$VG=[1,80],$VH=[1,81],$VI=[1,82],$VJ=[1,83],$VK=[1,84],$VL=[1,85],$VM=[2,71],$VN=[5,15,17,20,21,26,27,28,29,31,33,36,38,39,44,45,46,47,48],$VO=[16,24,37,42,52,53,58,59,60,61,62,63,64,65],$VP=[16,24,37,42,52,53,54,55,57,58,59,60,61,62,63,64,65],$VQ=[16,24,37,42,58,59,64,65],$VR=[16,24,37,42,58,59,60,61,62,63,64,65],$VS=[1,130],$VT=[1,131],$VU=[20,36,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"inicio":6,"writeline":7,"declaracion":8,"asignacion":9,"if":10,"while":11,"dowhile":12,"switch":13,"for":14,"BREAK":15,"PUNTO_Y_COMA":16,"CONTINUE":17,"statement":18,"LLAV_ABRE":19,"LLAV_CIERRA":20,"IF":21,"PAR_ABRE":22,"expresion":23,"PAR_CIERRA":24,"else":25,"ELSE":26,"WHILE":27,"DO":28,"FOR":29,"actualizacion":30,"IDENTIFICADOR":31,"IGUAL":32,"SWITCH":33,"ListaCase":34,"case":35,"CASE":36,"DOS_PUNTOS":37,"DEFAULT":38,"WRITELINE":39,"ListaExpr":40,"ListaVariables":41,"COMA":42,"tiposDatos":43,"STRING":44,"INT":45,"DOUBLE":46,"BOOLEAN":47,"CHAR":48,"incrementos":49,"MASMAS":50,"MENOSMENOS":51,"MENOS":52,"MAS":53,"POR":54,"DIVIDIR":55,"ELEVAR":56,"MODULO":57,"D_IGUAL":58,"DIFERENTE":59,"MAYOR_IGUAL":60,"MENOR_IGUAL":61,"MAYOR":62,"MENOR":63,"AND":64,"OR":65,"NOT":66,"ENTERO":67,"DECIMAL":68,"CADENA_COMILLAS":69,"CADENA_COMILLAS_SIMPLES":70,"TRUE":71,"FALSE":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"BREAK",16:"PUNTO_Y_COMA",17:"CONTINUE",19:"LLAV_ABRE",20:"LLAV_CIERRA",21:"IF",22:"PAR_ABRE",24:"PAR_CIERRA",26:"ELSE",27:"WHILE",28:"DO",29:"FOR",31:"IDENTIFICADOR",32:"IGUAL",33:"SWITCH",36:"CASE",37:"DOS_PUNTOS",38:"DEFAULT",39:"WRITELINE",42:"COMA",44:"STRING",45:"INT",46:"DOUBLE",47:"BOOLEAN",48:"CHAR",50:"MASMAS",51:"MENOSMENOS",52:"MENOS",53:"MAS",54:"POR",55:"DIVIDIR",56:"ELEVAR",57:"MODULO",58:"D_IGUAL",59:"DIFERENTE",60:"MAYOR_IGUAL",61:"MENOR_IGUAL",62:"MAYOR",63:"MENOR",64:"AND",65:"OR",66:"NOT",67:"ENTERO",68:"DECIMAL",69:"CADENA_COMILLAS",70:"CADENA_COMILLAS_SIMPLES",71:"TRUE",72:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[18,2],[18,3],[10,6],[25,2],[25,2],[25,0],[11,5],[12,7],[14,8],[30,1],[30,3],[13,7],[34,2],[34,1],[35,4],[35,3],[7,5],[41,3],[41,1],[43,1],[43,1],[43,1],[43,1],[43,1],[9,4],[9,5],[9,2],[8,3],[49,2],[49,2],[40,3],[40,1],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,3],[23,4],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 12:
this.$=new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 13:
this.$=new Continue(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 14:
this.$=new Statement([],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 15:
this.$=new Statement($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 16:
this.$= new If($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 17: case 18: case 23: case 64:
this.$=$$[$0]
break;
case 19:
this.$=null
break;
case 20:
this.$=new While($$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 21:
this.$=new DoWhile($$[$0-2],$$[$0-5],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 22:
this.$=new For($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line, _$[$0-7].first_column)
break;
case 24:
this.$= new AsignacionSinDeclaracion($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 25:
this.$=new Switch($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 26:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 27:
this.$=[$$[$0]];
break;
case 28:
this.$=[$$[$0-2],$$[$0]]
break;
case 29:
this.$=[new Literal("DEFAULT",TipoLiteral.STRING, _$[$0-2].first_line, _$[$0-2].first_column),$$[$0]]
break;
case 30:
this.$ = new WriteLine($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 31:
 $$[$0-2].push($$[$0]);
                                          this.$ = $$[$0-2];
break;
case 32: case 45:
this.$ = [$$[$0]];
break;
case 38:
this.$= new AsignacionSinDeclaracion($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 39:
this.$ = new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 40:
this.$=$$[$0-1]
break;
case 41:
this.$= new Asignacion($$[$0-2],$$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 42: case 43:
this.$=new IncrementoDecremento($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 44:
 $$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 46:
this.$= new Aritmetica($$[$0],new Literal("-1",TipoLiteral.DOUBLE, _$[$0-1].first_line, _$[$0-1].first_column),TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 47:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 48:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 49:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 50:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 51:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 52:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 53:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 54:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 55:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 56:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 57:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 58:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 59:
this.$= new Logica($$[$0-2],$$[$0],TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 60:
this.$= new Logica($$[$0-2],$$[$0],TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 61:
this.$= new Logica(null,$$[$0],TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 62:
this.$= $$[$0-1]
break;
case 63:
this.$ = new Casteos($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 65:
this.$= new Literal($$[$0],TipoLiteral.INT, _$[$0].first_line, _$[$0].first_column)
break;
case 66:
this.$= new Literal($$[$0],TipoLiteral.DOUBLE, _$[$0].first_line, _$[$0].first_column)
break;
case 67:

                                        var cadena = $$[$0].substr(0,$$[$0].length);
                                         cadena=cadena.replace(/\\n/g,"\n");
                                         cadena=cadena.replace(/\\t/g,"\t");
                                         cadena=cadena.replace(/\\'/g,"\'");
                                         cadena=cadena.replace(/\\\\/g,"\\");
                                         cadena=cadena.replace(/\"/g,"\\\"");//no agarra no se por que:( pero si le cambio de simbolo si agarra
                                        this.$= new Literal(cadena,TipoLiteral.STRING, _$[$0].first_line, _$[$0].first_column);
                                        
break;
case 68:
this.$= new Literal($$[$0],TipoLiteral.CHAR, _$[$0].first_line, _$[$0].first_column)
break;
case 69: case 70:
this.$= new Literal($$[$0],TipoLiteral.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
case 71:
this.$= new AccesoAmbito($$[$0], _$[$0].first_line, _$[$0].first_column)
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,21:$V2,27:$V3,28:$V4,29:$V5,31:$V6,33:$V7,39:$V8,43:15,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:17},{1:[3]},{5:[1,28],6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,21:$V2,27:$V3,28:$V4,29:$V5,31:$V6,33:$V7,39:$V8,43:15,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:17},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),{16:[1,30]},{16:[1,31]},{22:[1,32]},{31:[1,34],41:33},{32:[1,35],50:$Vf,51:$Vg},{16:[1,38]},{22:[1,39]},{22:[1,40]},{18:41,19:$Vh},{22:[1,43]},{22:[1,44]},o($Vi,[2,33]),o($Vi,[2,34]),o($Vi,[2,35]),o($Vi,[2,36]),o($Vi,[2,37]),{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,12]),o($Ve,[2,13]),{22:$Vj,23:46,31:$Vk,40:45,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{16:[1,58],42:[1,59]},o($Vt,[2,32],{32:$Vu}),{22:$Vj,23:61,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($Vv,[2,42]),o($Vv,[2,43]),o($Vw,[2,40]),{22:$Vj,23:62,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:63,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{27:[1,64]},{4:66,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,20:[1,65],21:$V2,27:$V3,28:$V4,29:$V5,31:$V6,33:$V7,39:$V8,43:15,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:17},{22:$Vj,23:67,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{9:68,31:$V6,43:69,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:17},{24:[1,70],42:[1,71]},o($Vx,[2,45],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),{22:$Vj,23:86,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:87,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:88,31:$Vk,43:89,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($Vv,[2,64]),o($Vv,[2,65]),o($Vv,[2,66]),o($Vv,[2,67]),o($Vv,[2,68]),o($Vv,[2,69]),o($Vv,[2,70]),o($Vv,$VM,{50:$Vf,51:$Vg}),o($Ve,[2,41]),{31:[1,90]},{22:$Vj,23:91,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{16:[1,92],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{24:[1,93],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{24:[1,94],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{22:[1,95]},o($VN,[2,14]),{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,20:[1,96],21:$V2,27:$V3,28:$V4,29:$V5,31:$V6,33:$V7,39:$V8,43:15,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:17},{24:[1,97],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{22:$Vj,23:98,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{31:[1,99]},{16:[1,100]},{22:$Vj,23:101,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:102,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:103,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:104,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:105,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:106,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:107,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:108,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:109,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:110,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:111,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:112,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:113,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:114,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{22:$Vj,23:115,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($Vv,[2,46]),o($Vv,[2,61]),{24:[1,116],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{24:[1,117]},o($Vt,[2,31]),{16:[1,118],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},o($Vw,[2,38]),{18:119,19:$Vh},{18:120,19:$Vh},{22:$Vj,23:121,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($VN,[2,15]),{19:[1,122]},{16:[1,123],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{32:$Vu},o($Ve,[2,30]),o($Vx,[2,44],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),o($VO,[2,47],{54:$VA,55:$VB,56:$VC,57:$VD}),o($VO,[2,48],{54:$VA,55:$VB,56:$VC,57:$VD}),o($VP,[2,49],{56:$VC}),o($VP,[2,50],{56:$VC}),o($Vv,[2,51]),o($VP,[2,52],{56:$VC}),o($VQ,[2,53],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,60:$VG,61:$VH,62:$VI,63:$VJ}),o($VQ,[2,54],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,60:$VG,61:$VH,62:$VI,63:$VJ}),o($VR,[2,55],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD}),o($VR,[2,56],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD}),o($VR,[2,57],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD}),o($VR,[2,58],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD}),o([16,24,37,42,64,65],[2,59],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ}),o([16,24,37,42,65],[2,60],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK}),o($Vv,[2,62]),{22:$Vj,23:124,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($Vw,[2,39]),o($Ve,[2,19],{25:125,26:[1,126]}),o($Ve,[2,20]),{24:[1,127],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{34:128,35:129,36:$VS,38:$VT},{22:$Vj,23:133,30:132,31:[1,134],49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($Vv,[2,63]),o($Ve,[2,16]),{10:136,18:135,19:$Vh,21:$V2},{16:[1,137]},{20:[1,138],35:139,36:$VS,38:$VT},o($VU,[2,27]),{22:$Vj,23:140,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{37:[1,141]},{24:[1,142]},{24:[2,23],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},o([24,52,53,54,55,56,57,58,59,60,61,62,63,64,65],$VM,{32:[1,143],50:$Vf,51:$Vg}),o($Ve,[2,17]),o($Ve,[2,18]),o($Ve,[2,21]),o($Ve,[2,25]),o($VU,[2,26]),{37:[1,144],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{4:145,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,21:$V2,27:$V3,28:$V4,29:$V5,31:$V6,33:$V7,39:$V8,43:15,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:17},{18:146,19:$Vh},{22:$Vj,23:147,31:$Vk,49:50,52:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{4:148,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,21:$V2,27:$V3,28:$V4,29:$V5,31:$V6,33:$V7,39:$V8,43:15,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:17},o($VU,[2,29],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,43:15,49:17,6:29,15:$V0,17:$V1,21:$V2,27:$V3,28:$V4,29:$V5,31:$V6,33:$V7,39:$V8,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd}),o($Ve,[2,22]),{24:[2,24],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},o($VU,[2,28],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,43:15,49:17,6:29,15:$V0,17:$V1,21:$V2,27:$V3,28:$V4,29:$V5,31:$V6,33:$V7,39:$V8,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd})],
defaultActions: {28:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Aritmetica,TipoAritmetica} = require('../Expresion/Aritmetica')
    const {Relacional,TipoRelacional} = require('../Expresion/Relacional')
    const {Literal,TipoLiteral} = require('../Expresion/Literal')
    const {Logica,TipoLogica} = require('../Expresion/Logica')
    const error_1 = require('../Error/Error')
    const listaErrores = require('../Error/ListaErrores')
    const {AccesoAmbito} = require('../Expresion/AccesoAmbito')
    const {Declaracion} = require('../Instruccion/Declaracion')
    const {WriteLine} = require('../Instruccion/WriteLine')
    const {Asignacion} = require('../Instruccion/Asignacion')
    const {AsignacionSinDeclaracion} = require('../Instruccion/AsignacionSinDeclaracion')
    const {Casteos} = require('../Instruccion/Casteos')
    const {IncrementoDecremento}=require('../Instruccion/IncrementoDecremento')
    const {If}=require('../Instruccion/If')
    const {Statement}=require('../Instruccion/Statement')
    const {Continue}=require('../Instruccion/Continue')
    const {Break}=require('../Instruccion/Break')
    const {While}=require('../Instruccion/While')
    const {Switch}=require('../Instruccion/Switch')
    const {DoWhile}=require('../Instruccion/DoWhile')
    const {For}=require('../Instruccion/For')
    const {Error}=require('../Error/Error')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 71;
break;
case 4:return 72;
break;
case 5:return 39;
break;
case 6:return 44;
break;
case 7:return 45;
break;
case 8:return 46;
break;
case 9:return 47;
break;
case 10:return 48;
break;
case 11:return 21;
break;
case 12:return 26;
break;
case 13:return 27;
break;
case 14:return 28;
break;
case 15:return 15;
break;
case 16:return 17;
break;
case 17:return 33;
break;
case 18:return 38;
break;
case 19:return 36;
break;
case 20:return 29;
break;
case 21:return 68;
break;
case 22:return 67;
break;
case 23:return 31;
break;
case 24:return 69;
break;
case 25:return 70;
break;
case 26:return 22;                   
break;
case 27:return 24;
break;
case 28:return   'LLAV_ABRE';
break;
case 29:return   'LLAV_CIERRA';
break;
case 30:return 58;
break;
case 31:return 61;
break;
case 32:return 63;
break;
case 33:return 60;                     
break;
case 34:return 62;
break;
case 35:return 59;
break;
case 36:return 65;
break;
case 37:return 64;
break;
case 38:return 66;
break;
case 39:return 50
break;
case 40:return 51
break;
case 41:return 42
break;
case 42:return 53;
break;
case 43:return 52;
break;
case 44:return 54;
break;
case 45:return 55;
break;
case 46:return 56;
break;
case 47:return 57;
break;
case 48:return 32;
break;
case 49:return 16;
break;
case 50:return 37;
break;
case 51: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 69;
break;
case 52: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70;
break;
case 53:return 5;
break;
case 54:
                        /*const er = new error_1.Error(yy_.yylloc.first_line,yy_.yylloc.first_column,"Léxico",yy_.yytext);
                        listaErrores.ListaErrores.getInstance().push(er);*/
                        console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);
                        new Error(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico','Error detectado');                     
                        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:writeline\b)/i,/^(?:string\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:for\b)/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/i,/^(?:[A-Za-z]+['_'0-9A-Za-z]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}