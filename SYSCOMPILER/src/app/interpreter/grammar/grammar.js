/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,17],$V2=[1,22],$V3=[1,28],$V4=[1,20],$V5=[1,23],$V6=[1,24],$V7=[1,26],$V8=[1,25],$V9=[1,27],$Va=[1,18],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[20,21,24,25,31,33,35,36,37,40,42,48,50,51,54,55,56,57,58],$Vh=[2,14],$Vi=[1,44],$Vj=[1,43],$Vk=[1,45],$Vl=[1,46],$Vm=[1,51],$Vn=[28,33],$Vo=[1,60],$Vp=[1,69],$Vq=[1,58],$Vr=[1,59],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[19,44],$Vz=[1,72],$VA=[19,28,44,49,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VB=[20,21,24,25,26,31,33,35,36,37,40,42,48,50,51,54,55,56,57,58,62,76,77,78,79,80,81,82],$VC=[1,88],$VD=[28,44],$VE=[1,90],$VF=[1,89],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[1,96],$VM=[1,97],$VN=[1,98],$VO=[1,99],$VP=[1,100],$VQ=[1,101],$VR=[1,102],$VS=[2,90],$VT=[20,21,24,25,30,31,33,35,36,37,40,42,48,50,51,54,55,56,57,58],$VU=[1,122],$VV=[1,123],$VW=[1,124],$VX=[1,125],$VY=[1,126],$VZ=[19,28,44,49,62,63,68,69,70,71,72,73,74,75],$V_=[19,28,44,49,62,63,64,65,67,68,69,70,71,72,73,74,75],$V$=[19,28,44,49,68,69,74,75],$V01=[19,28,44,49,68,69,70,71,72,73,74,75],$V11=[1,164],$V21=[1,165],$V31=[24,48,50],$V41=[5,20,21,24,25,31,33,35,36,37,40,42,48,50,51,54,55,56,57,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"finalinstrucciones":4,"EOF":5,"instrucciones":6,"startwith":7,"inicio":8,"writeline":9,"declaracion":10,"asignacion":11,"if":12,"while":13,"dowhile":14,"switch":15,"for":16,"metodo":17,"llamadametodo":18,"PUNTO_Y_COMA":19,"BREAK":20,"CONTINUE":21,"statement":22,"LLAV_ABRE":23,"LLAV_CIERRA":24,"IF":25,"PAR_ABRE":26,"expresion":27,"PAR_CIERRA":28,"else":29,"ELSE":30,"START":31,"WITH":32,"IDENTIFICADOR":33,"ListaExpr":34,"WHILE":35,"DO":36,"FOR":37,"actualizacion":38,"IGUAL":39,"SWITCH":40,"ListaCase":41,"VOID":42,"parametros":43,"COMA":44,"declaracionmetodo":45,"tiposDatosparametros":46,"case":47,"CASE":48,"DOS_PUNTOS":49,"DEFAULT":50,"WRITELINE":51,"ListaVariables":52,"tiposDatos":53,"STRING":54,"INT":55,"DOUBLE":56,"BOOLEAN":57,"CHAR":58,"incrementos":59,"MASMAS":60,"MENOSMENOS":61,"MENOS":62,"MAS":63,"POR":64,"DIVIDIR":65,"ELEVAR":66,"MODULO":67,"D_IGUAL":68,"DIFERENTE":69,"MAYOR_IGUAL":70,"MENOR_IGUAL":71,"MAYOR":72,"MENOR":73,"AND":74,"OR":75,"NOT":76,"ENTERO":77,"DECIMAL":78,"CADENA_COMILLAS":79,"CADENA_COMILLAS_SIMPLES":80,"TRUE":81,"FALSE":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"PUNTO_Y_COMA",20:"BREAK",21:"CONTINUE",23:"LLAV_ABRE",24:"LLAV_CIERRA",25:"IF",26:"PAR_ABRE",28:"PAR_CIERRA",30:"ELSE",31:"START",32:"WITH",33:"IDENTIFICADOR",35:"WHILE",36:"DO",37:"FOR",39:"IGUAL",40:"SWITCH",42:"VOID",44:"COMA",48:"CASE",49:"DOS_PUNTOS",50:"DEFAULT",51:"WRITELINE",54:"STRING",55:"INT",56:"DOUBLE",57:"BOOLEAN",58:"CHAR",60:"MASMAS",61:"MENOSMENOS",62:"MENOS",63:"MAS",64:"POR",65:"DIVIDIR",66:"ELEVAR",67:"MODULO",68:"D_IGUAL",69:"DIFERENTE",70:"MAYOR_IGUAL",71:"MENOR_IGUAL",72:"MAYOR",73:"MENOR",74:"AND",75:"OR",76:"NOT",77:"ENTERO",78:"DECIMAL",79:"CADENA_COMILLAS",80:"CADENA_COMILLAS_SIMPLES",81:"TRUE",82:"FALSE"},
productions_: [0,[3,2],[4,2],[6,2],[6,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,2],[8,2],[22,2],[22,3],[12,6],[29,2],[29,2],[29,0],[7,6],[7,7],[13,5],[14,7],[16,8],[38,1],[38,3],[15,7],[17,5],[17,6],[43,3],[43,1],[45,2],[18,3],[18,4],[41,2],[41,1],[47,4],[47,3],[9,5],[52,3],[52,1],[53,1],[53,1],[53,1],[53,1],[53,1],[46,1],[46,1],[46,1],[46,1],[46,1],[11,4],[11,5],[11,2],[10,3],[59,2],[59,2],[34,3],[34,1],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,1],[27,4],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        
		return $$[$0-1];
	
break;
case 2:
$$[$0-1].push($$[$0]);
break;
case 3:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 4:
 this.$ = [$$[$0]]; 
break;
case 16:
this.$=new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 17:
this.$=new Continue(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 18:
this.$=new Statement([],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 19:
this.$=new Statement($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 20:
this.$= new If($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 21: case 22: case 29: case 83:
this.$=$$[$0]
break;
case 23:
this.$=null
break;
case 24:
this.$=new StartWith($$[$0-3],[],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 25:
this.$=new StartWith($$[$0-4],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 26:
this.$=new While($$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 27:
this.$=new DoWhile($$[$0-2],$$[$0-5],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 28:
this.$=new For($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line, _$[$0-7].first_column)
break;
case 30:
this.$= new AsignacionSinDeclaracion($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 31:
this.$=new Switch($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 32:
this.$=new Metodo($$[$0-3],$$[$0],[],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 33:
this.$=new Metodo($$[$0-4],$$[$0],$$[$0-2],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 34:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 35:
this.$=[$$[$0]]
break;
case 36:
this.$=[$$[$0-1],$$[$0]]
break;
case 37:
this.$=new LlamadaMetodo($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 38:
this.$=new LlamadaMetodo($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 39:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 40:
this.$=[$$[$0]];
break;
case 41:
this.$=[$$[$0-2],$$[$0]]
break;
case 42:
this.$=[new Literal("DEFAULT",TipoLiteral.STRING, _$[$0-2].first_line, _$[$0-2].first_column),$$[$0]]
break;
case 43:
this.$ = new WriteLine($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 44:
 $$[$0-2].push($$[$0]);
                                          this.$ = $$[$0-2];
break;
case 45: case 63:
this.$ = [$$[$0]];
break;
case 51:
this.$=4
break;
case 52:
this.$=0
break;
case 53:
this.$=1
break;
case 54:
this.$=2
break;
case 55:
this.$=3
break;
case 56:
this.$= new AsignacionSinDeclaracion($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 57:
this.$ = new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 58:
this.$=$$[$0-1]
break;
case 59:
this.$= new Asignacion($$[$0-2],$$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 60: case 61:
this.$=new IncrementoDecremento($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 62:
 $$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 64:
this.$= new Aritmetica($$[$0],new Literal("-1",TipoLiteral.DOUBLE, _$[$0-1].first_line, _$[$0-1].first_column),TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 65:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 66:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 67:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 68:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 69:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 70:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 71:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 72:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 73:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 74:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 75:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 76:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 77:
this.$= new Logica($$[$0-2],$$[$0],TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 78:
this.$= new Logica($$[$0-2],$$[$0],TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 79:
this.$= new Logica(null,$$[$0],TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 80:
this.$= $$[$0-1]
break;
case 82:
this.$ = new Casteos($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 84:
this.$= new Literal($$[$0],TipoLiteral.INT, _$[$0].first_line, _$[$0].first_column)
break;
case 85:
this.$= new Literal($$[$0],TipoLiteral.DOUBLE, _$[$0].first_line, _$[$0].first_column)
break;
case 86:

                                        var cadena = $$[$0].substr(0,$$[$0].length);
                                         cadena=cadena.replace(/\\n/g,"\n");
                                         cadena=cadena.replace(/\\t/g,"\t");
                                         cadena=cadena.replace(/\\'/g,"\'");
                                         cadena=cadena.replace(/\\\\/g,"\\");
                                         cadena=cadena.replace(/\"/g,"\\\"");//no agarra no se por que:( pero si le cambio de simbolo si agarra
                                        this.$= new Literal(cadena,TipoLiteral.STRING, _$[$0].first_line, _$[$0].first_column);
                                        
break;
case 87:
this.$= new Literal($$[$0],TipoLiteral.CHAR, _$[$0].first_line, _$[$0].first_column)
break;
case 88: case 89:
this.$= new Literal($$[$0],TipoLiteral.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
case 90:
this.$= new AccesoAmbito($$[$0], _$[$0].first_line, _$[$0].first_column)
break;
}
},
table: [{3:1,4:2,6:3,7:14,8:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,20:$V0,21:$V1,25:$V2,31:$V3,33:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:$V9,51:$Va,53:19,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:21},{1:[3]},{5:[1,34]},{7:35,8:36,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,20:$V0,21:$V1,25:$V2,31:$V3,33:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:$V9,51:$Va,53:19,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:21},o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,$Vh),{19:[1,37]},{19:[1,38]},{19:[1,39]},{26:[1,40]},{33:[1,42],52:41},{26:$Vi,39:$Vj,60:$Vk,61:$Vl},{19:[1,47]},{26:[1,48]},{26:[1,49]},{22:50,23:$Vm},{26:[1,52]},{26:[1,53]},{33:[1,54]},{32:[1,55]},o($Vn,[2,46]),o($Vn,[2,47]),o($Vn,[2,48]),o($Vn,[2,49]),o($Vn,[2,50]),{1:[2,1]},o([20,21,25,31,33,35,36,37,40,42,51,54,55,56,57,58],$Vh,{5:[2,2]}),o($Vg,[2,3]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),{18:61,26:$Vo,27:57,33:$Vp,34:56,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{19:[1,70],44:[1,71]},o($Vy,[2,45],{39:$Vz}),{18:61,26:$Vo,27:73,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:57,28:[1,74],33:$Vp,34:75,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},o($VA,[2,60]),o($VA,[2,61]),o($VB,[2,58]),{18:61,26:$Vo,27:76,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:77,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{35:[1,78]},{6:80,7:14,8:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,20:$V0,21:$V1,24:[1,79],25:$V2,31:$V3,33:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:$V9,51:$Va,53:19,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:21},{18:61,26:$Vo,27:81,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{11:82,33:[1,83],53:84,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:21},{26:[1,85]},{33:[1,86]},{28:[1,87],44:$VC},o($VD,[2,63],{62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),{18:61,26:$Vo,27:103,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:104,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:105,33:$Vp,53:106,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},o($VA,[2,81]),o($VA,[2,83]),o($VA,[2,84]),o($VA,[2,85]),o($VA,[2,86]),o($VA,[2,87]),o($VA,[2,88]),o($VA,[2,89]),o($VA,$VS,{26:$Vi,60:$Vk,61:$Vl}),o($Vg,[2,59]),{33:[1,107]},{18:61,26:$Vo,27:108,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{19:[1,109],62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($VA,[2,37]),{28:[1,110],44:$VC},{28:[1,111],62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{28:[1,112],62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{26:[1,113]},o($VT,[2,18]),{7:14,8:36,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,20:$V0,21:$V1,24:[1,114],25:$V2,31:$V3,33:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:$V9,51:$Va,53:19,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:21},{28:[1,115],62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{18:61,26:$Vo,27:116,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{39:$Vj,60:$Vk,61:$Vl},{33:[1,117]},{28:[1,118],43:119,45:120,46:121,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY},{26:[1,127]},{19:[1,128]},{18:61,26:$Vo,27:129,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:130,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:131,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:132,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:133,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:134,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:135,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:136,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:137,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:138,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:139,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:140,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:141,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:142,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{18:61,26:$Vo,27:143,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},o($VA,[2,64]),o($VA,[2,79]),{28:[1,144],62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{28:[1,145]},o($Vy,[2,44]),{19:[1,146],62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($VB,[2,56]),o($VA,[2,38]),{22:147,23:$Vm},{22:148,23:$Vm},{18:61,26:$Vo,27:149,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},o($VT,[2,19]),{23:[1,150]},{19:[1,151],62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{39:$Vz},{22:152,23:$Vm},{28:[1,153],44:[1,154]},o($VD,[2,35]),{33:[1,155]},{33:[2,51]},{33:[2,52]},{33:[2,53]},{33:[2,54]},{33:[2,55]},{18:61,26:$Vo,27:57,28:[1,156],33:$Vp,34:157,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},o($Vg,[2,43]),o($VD,[2,62],{62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),o($VZ,[2,65],{64:$VG,65:$VH,66:$VI,67:$VJ}),o($VZ,[2,66],{64:$VG,65:$VH,66:$VI,67:$VJ}),o($V_,[2,67],{66:$VI}),o($V_,[2,68],{66:$VI}),o($VA,[2,69]),o($V_,[2,70],{66:$VI}),o($V$,[2,71],{62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,70:$VM,71:$VN,72:$VO,73:$VP}),o($V$,[2,72],{62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,70:$VM,71:$VN,72:$VO,73:$VP}),o($V01,[2,73],{62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ}),o($V01,[2,74],{62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ}),o($V01,[2,75],{62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ}),o($V01,[2,76],{62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ}),o([19,28,44,49,74,75],[2,77],{62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP}),o([19,28,44,49,75],[2,78],{62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ}),o($VA,[2,80]),{18:61,26:$Vo,27:158,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},o($VB,[2,57]),o($Vg,[2,23],{29:159,30:[1,160]}),o($Vg,[2,26]),{28:[1,161],62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{41:162,47:163,48:$V11,50:$V21},{18:61,26:$Vo,27:167,33:[1,168],38:166,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},o($Vg,[2,32]),{22:169,23:$Vm},{45:170,46:121,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY},o($VD,[2,36]),{19:[1,171]},{28:[1,172],44:$VC},o($VA,[2,82]),o($Vg,[2,20]),{12:174,22:173,23:$Vm,25:$V2},{19:[1,175]},{24:[1,176],47:177,48:$V11,50:$V21},o($V31,[2,40]),{18:61,26:$Vo,27:178,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},{49:[1,179]},{28:[1,180]},{28:[2,29],62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o([28,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VS,{26:$Vi,39:[1,181],60:$Vk,61:$Vl}),o($Vg,[2,33]),o($VD,[2,34]),o($V41,[2,24]),{19:[1,182]},o($Vg,[2,21]),o($Vg,[2,22]),o($Vg,[2,27]),o($Vg,[2,31]),o($V31,[2,39]),{49:[1,183],62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{6:184,7:14,8:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,20:$V0,21:$V1,25:$V2,31:$V3,33:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:$V9,51:$Va,53:19,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:21},{22:185,23:$Vm},{18:61,26:$Vo,27:186,33:$Vp,59:62,62:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx},o($V41,[2,25]),{6:187,7:14,8:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,20:$V0,21:$V1,25:$V2,31:$V3,33:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:$V9,51:$Va,53:19,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:21},o($V31,[2,42],{9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,7:14,18:15,53:19,59:21,8:36,20:$V0,21:$V1,25:$V2,31:$V3,33:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:$V9,51:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf}),o($Vg,[2,28]),{28:[2,30],62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($V31,[2,41],{9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,7:14,18:15,53:19,59:21,8:36,20:$V0,21:$V1,25:$V2,31:$V3,33:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:$V9,51:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf})],
defaultActions: {34:[2,1],122:[2,51],123:[2,52],124:[2,53],125:[2,54],126:[2,55]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Aritmetica,TipoAritmetica} = require('../Expresion/Aritmetica')
    const {Relacional,TipoRelacional} = require('../Expresion/Relacional')
    const {Literal,TipoLiteral} = require('../Expresion/Literal')
    const {Logica,TipoLogica} = require('../Expresion/Logica')
    const error_1 = require('../Error/Error')
    const listaErrores = require('../Error/ListaErrores')
    const {AccesoAmbito} = require('../Expresion/AccesoAmbito')
    const {Declaracion} = require('../Instruccion/Declaracion')
    const {WriteLine} = require('../Instruccion/WriteLine')
    const {Asignacion} = require('../Instruccion/Asignacion')
    const {AsignacionSinDeclaracion} = require('../Instruccion/AsignacionSinDeclaracion')
    const {Casteos} = require('../Instruccion/Casteos')
    const {IncrementoDecremento}=require('../Instruccion/IncrementoDecremento')
    const {If}=require('../Instruccion/If')
    const {Statement}=require('../Instruccion/Statement')
    const {Continue}=require('../Instruccion/Continue')
    const {Break}=require('../Instruccion/Break')
    const {While}=require('../Instruccion/While')
    const {Switch}=require('../Instruccion/Switch')
    const {DoWhile}=require('../Instruccion/DoWhile')
    const {For}=require('../Instruccion/For')
    const {Error}=require('../Error/Error')
    const {Metodo}=require('../Instruccion/Metodo')
    const {LlamadaMetodo}=require('../Instruccion/LlamadaMetodo')
    const {StartWith}=require('../Instruccion/StartWith')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 81;
break;
case 4:return 82;
break;
case 5:return 51;
break;
case 6:return 54;
break;
case 7:return 55;
break;
case 8:return 56;
break;
case 9:return 57;
break;
case 10:return 58;
break;
case 11:return 25;
break;
case 12:return 30;
break;
case 13:return 35;
break;
case 14:return 36;
break;
case 15:return 20;
break;
case 16:return 21;
break;
case 17:return 40;
break;
case 18:return 50;
break;
case 19:return 48;
break;
case 20:return 37;
break;
case 21:return 42;
break;
case 22:return 31;
break;
case 23:return 32;
break;
case 24:return 78;
break;
case 25:return 77;
break;
case 26:return 33;
break;
case 27:return 79;
break;
case 28:return 80;
break;
case 29:return 26;                   
break;
case 30:return 28;
break;
case 31:return   'LLAV_ABRE';
break;
case 32:return   'LLAV_CIERRA';
break;
case 33:return 68;
break;
case 34:return 71;
break;
case 35:return 73;
break;
case 36:return 70;                     
break;
case 37:return 72;
break;
case 38:return 69;
break;
case 39:return 75;
break;
case 40:return 74;
break;
case 41:return 76;
break;
case 42:return 60
break;
case 43:return 61
break;
case 44:return 44
break;
case 45:return 63;
break;
case 46:return 62;
break;
case 47:return 64;
break;
case 48:return 65;
break;
case 49:return 66;
break;
case 50:return 67;
break;
case 51:return 39;
break;
case 52:return 19;
break;
case 53:return 49;
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 79;
break;
case 55: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80;
break;
case 56:return 5;
break;
case 57:
                        /*const er = new error_1.Error(yy_.yylloc.first_line,yy_.yylloc.first_column,"Léxico",yy_.yytext);
                        listaErrores.ListaErrores.getInstance().push(er);*/
                        console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);
                        new Error(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico','Error detectado');                     
                        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:writeline\b)/i,/^(?:string\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/i,/^(?:[A-Za-z]+['_'0-9A-Za-z]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}